SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE FUNCTION [dbo].[pf_GetWTimeCorInfo](@Date datetime, @EmpID int, @OurID int, @WTSignID int, @WorkHours numeric(21,9), @EveningHours numeric(21,9), @NightHours numeric(21,9), @OverTime numeric(21,9),  @PayFactor numeric(21,9), @OverPayFactor numeric(21,9))/* Возвращает информацию об отклонениях от графика работы для сотрудника */RETURNS @out TABLE (WTSignID int DEFAULT NULL, ShiftType int DEFAULT 0, WorkHours numeric(21,9) DEFAULT 0, EveningHours numeric(21,9) DEFAULT 0, NightHours numeric(21,9) DEFAULT 0, OverTime numeric(21,9) DEFAULT 0,  PayFactor numeric(21,9) DEFAULT 0, OverPayFactor numeric(21,9) DEFAULT 0)ASBEGIN  DECLARE  @tmp1 TABLE (WTSignID int DEFAULT NULL, ShiftType int DEFAULT 0, WorkHours numeric(21,9) DEFAULT 0, EveningHours numeric(21,9) DEFAULT 0, NightHours numeric(21,9) DEFAULT 0, OverTime numeric(21,9) DEFAULT 0,  PayFactor numeric(21,9) DEFAULT 0, OverPayFactor numeric(21,9) DEFAULT 0)  DECLARE  @tmp2 TABLE (WTSignID int DEFAULT NULL, ShiftType int DEFAULT 0, WorkHours numeric(21,9) DEFAULT 0, EveningHours numeric(21,9) DEFAULT 0, NightHours numeric(21,9) DEFAULT 0, OverTime numeric(21,9) DEFAULT 0,  PayFactor numeric(21,9) DEFAULT 0, OverPayFactor numeric(21,9) DEFAULT 0)  DECLARE @DateE datetime, @i int, @d1 datetime, @d2 datetime  DECLARE @Shifts TABLE (ShiftType int, BTime datetime, ETime datetime, PayFactor numeric(21,9), OverPayFactor numeric(21,9))  DECLARE @tmp TABLE(WTSignID int, PayFactor numeric(21,9) DEFAULT 0, BDate datetime, EDate datetime)  SET @Date = dbo.zf_GetDate(@Date)  SET @DateE = DATEADD(second, -1, DATEADD(DAY, 1, @Date))  /* получить информацию о сменах */  INSERT INTO @Shifts  SELECT 1 ShiftType, dbo.zf_GetTime(DayBTime) AS BTime, dbo.zf_GetTime(DayETime) AS ETime, 1 AS PayFactor, OverPayFactor  FROM r_Ours WHERE OurID = @OurID UNION  SELECT 2, dbo.zf_GetTime(EvenBTime), dbo.zf_GetTime(EvenETime), EvenPayFac, OverPayFactor FROM r_Ours WHERE OurID = @OurID UNION  SELECT 3, dbo.zf_GetTime(NightBTime), dbo.zf_GetTime(NightETime), NightPayFac, OverPayFactor FROM r_Ours WHERE OurID = @OurID  /* приведение графика смен к дате */  UPDATE @Shifts SET BTime = BTime + @Date, ETime = ETime + @Date  /* коррекция конечной даты ночной смены, если она пересекает полночь */  SET @i = ISNULL((SELECT ShiftType FROM @Shifts WHERE BTime > ETime), 0);  IF @i > 0 UPDATE @Shifts SET ETime = DATEADD(DAY, 1, ETime) WHERE ShiftType = @i  /* выбрать отклонения относящиеся к указанной дате */  INSERT INTO @tmp(WTSignID, PayFactor, BDate, EDate)  SELECT WTSignID, DayPayFactor, AppDate, AppDate  FROM p_CWTimeCor m  WHERE AppDate BETWEEN @Date AND @DateE AND OurID = @OurID AND EmpID = @EmpID AND UseInWTime = 1  /* разбить полученные промежутки времени на смены */  SET @i = (SELECT COUNT(*) FROM @Shifts)  WHILE @i > 0    BEGIN      SELECT @d1 = BTime, @d2 = ETime FROM @Shifts WHERE ShiftType = @i      INSERT INTO @out (WTSignID, ShiftType, WorkHours, EveningHours, NightHours, PayFactor)      SELECT             WTSignID,             @i,             WorkHours,                                            /* WorkHours */             CASE WHEN @i = 2 THEN WorkHours ELSE 0 END,           /* EveningHours */             CASE WHEN @i IN (3, 4) THEN WorkHours ELSE 0 END,     /* NightHours */             PayFactor      FROM (             SELECT ROUND(DATEDIFF(MINUTE, d1, d2) * 1.00 / 60, 1) * wt WorkHours, WTSignID, PayFactor, d1, d2             FROM (                    SELECT CASE WHEN BDate < @d1 THEN @d1 ELSE BDate END d1, CASE WHEN EDate > @d2 THEN @d2 ELSE EDate END d2, CASE WHEN WTSignID IN (SELECT WTSignID FROM r_WTSigns WHERE IsWorkTime = 1) THEN 1 ELSE -1 END wt, *                    FROM @tmp t                    WHERE t.BDate BETWEEN @d1 AND @d2 OR t.EDate BETWEEN  @d1 AND @d2 OR (t.BDate < @d1 AND t.EDate > @d2)                   ) t            ) tt      SET @i = @i - 1    END  /* начальные значения: необходимо для корректного расчета итогового значения PayFactor */  INSERT INTO @out (WTSignID, ShiftType, WorkHours, NightHours, EveningHours, PayFactor)  VALUES  (@WTSignID, 1, @WorkHours, @NightHours, @EveningHours, @PayFactor)  /* перенести нерабочее время в отдельную таблицу т.к. на эти записи распределение коэффициента не должно производиться */  INSERT INTO @tmp2 (ShiftType, WorkHours, EveningHours, NightHours, OverTime, PayFactor, OverPayFactor)  SELECT SUM(ShiftType), SUM(WorkHours), SUM(EveningHours), SUM(NightHours), SUM(OverTime), 0, 0  FROM @out  WHERE WorkHours < 0  /* консолидация данных с пропорциональным расчетом коэффициента */  INSERT INTO @tmp1 (WTSignID, ShiftType, WorkHours, EveningHours, NightHours, OverTime, PayFactor, OverPayFactor)  SELECT @WTSignID, 0, SUM(TWorkHours), SUM(TEveningHours), SUM(TNightHours), @OverTime, CASE WHEN SUM(TWorkHours) > 0 THEN SUM(TWorkHours * AvgPayFactor) / SUM(TWorkHours) ELSE 0 END, @OverPayFactor  FROM      ( SELECT ShiftType,  SUM(WorkHours) TWorkHours, SUM(EveningHours) TEveningHours, SUM(NightHours) TNightHours, CASE WHEN SUM(WorkHours) > 0 THEN SUM(WorkHours *  PayFactor) / SUM(WorkHours) ELSE 0 END AvgPayFactor        FROM @out        WHERE WorkHours > 0        GROUP BY ShiftType       ) t  INSERT INTO @out (WTSignID, ShiftType, WorkHours, EveningHours, NightHours, OverTime, PayFactor, OverPayFactor)  SELECT @WTSignID, 0, SUM(WorkHours), SUM(EveningHours), SUM(NightHours), @OverTime, SUM(PayFactor), @OverPayFactor  FROM    (      SELECT WorkHours, EveningHours, NightHours, PayFactor FROM @tmp1      UNION ALL      SELECT WorkHours, EveningHours, NightHours, PayFactor FROM @tmp2    ) t  /* вычисление типа рабочего времени: обрабатывается только итоговая запись ShiftType = 0 */  UPDATE @out SET WTSignID = CASE  /* переопределение типа рабочего времени */                               WHEN WorkHours > 0 AND EXISTS (SELECT WTSignID FROM r_WTSigns WHERE IsWorkTime <> 1 AND WTSignID = @WTSignID) THEN 1  /* работа в нерабочий день */                               WHEN (SELECT SUM(WorkHours) FROM @out WHERE WorkHours < 0) <= -3 THEN 24    /* прогул */                               WHEN (SELECT SUM(WorkHours) FROM @out WHERE WorkHours < 0) < 0 THEN 30      /* Другие причины неявок */                               ELSE WTSignID                             END,                  OverTime = CASE /* время больше начального значения относим к сверурочным */                               WHEN WorkHours > @WorkHours THEN OverTime + WorkHours - @WorkHours                               ELSE OverTime                             END,                  OverPayFactor = CASE  /* переопрееление коэффициента оплаты сверурочных (если установить в 0 - берется из справочника обозначений рабочего времени) по WTSignID */                               WHEN (OverTime + WorkHours - @WorkHours) > 0 THEN 2.2                               ELSE OverPayFactor                             END  WHERE ShiftType = 0  RETURNEND
GO
