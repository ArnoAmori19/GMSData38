SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
CREATE FUNCTION [dbo].[pf_DisPayCalcAvgSalary](@Date datetime, @EmpID int, @OurID int)/* Возвращает среднюю зарплату за последние 2 месяца для расчета выходного пособия */RETURNS @out TABLE(SrcDate datetime, WorkDays int DEFAULT 0, NormDays int DEFAULT 0, Salary numeric(21,9) DEFAULT 0, AvrDays numeric(21,9) DEFAULT 0,  AvrSalary numeric(21,9) DEFAULT 0, AvrMonthSalary numeric(21,9) DEFAULT 0)ASBEGIN DECLARE @GivDate datetime, @EDate datetime, @BDate datetime DECLARE @DayCount int SET @GivDate = dbo.pf_GetEmpGivDate(DATEADD(day, -1, @Date), @EmpID, @OurID) IF @GivDate = '20790101' RETURN SET @BDate = DATEADD(month, -2, dbo.zf_GetMonthFirstDay(@Date)) SET @EDate = DATEADD(day, -1, DATEADD(month, 2, @BDate)) IF @BDate < @GivDate SET @BDate = @GivDate /* отработанно дней за последние 2 месяца */ SET @DayCount = 0 SELECT @DayCount = SUM(TWorkDays) FROM p_CWTime m JOIN p_CWTimeD d ON m.ChID = d.ChID WHERE CWTimeType = 0 AND OurID = @OurID AND EmpID = @EmpID AND DocDate BETWEEN @BDate AND @EDate IF @DayCount = 0   BEGIN     /* если последние 2 месяца сотрудник не работал, то берем предыдущие 2 месяца */     SET @BDate = DATEADD(month, -2, dbo.zf_GetMonthFirstDay(@Date))     SET @EDate = DATEADD(day, -1, DATEADD(month, 2, @BDate))     IF @BDate < @GivDate SET @BDate = @GivDate     SELECT @DayCount = SUM(TWorkDays) FROM p_CWTime m JOIN p_CWTimeD d ON m.ChID = d.ChID WHERE CWTimeType = 0 AND OurID = @OurID AND EmpID = @EmpID AND DocDate BETWEEN @BDate AND @EDate   END IF @DayCount <> 0   BEGIN     /* есть данные о том что сотрудник работал */     INSERT INTO @out(SrcDate, Salary)     SELECT MIN(DocDate) SrcDate, SUM(SumCC)     FROM p_LRec m JOIN p_LRecD d ON  m.ChID = d.ChID JOIN p_LRecDD dd ON d.AChID = dd.AChID JOIN r_PayTypes r ON dd.PayTypeID = r.PayTypeID     WHERE LRecType = 0 AND dd.IsDeduction = 0 AND OurID = @OurID AND EmpID = @EmpID AND r.UseInDisPay <> 0 AND DocDate BETWEEN @BDate AND @EDate     GROUP BY MONTH(DocDate), EmpID, OurID     /* если нет данных о начислении ЗП, то попытаться загрузить их из входящих */     INSERT INTO @out(SrcDate, Salary)     SELECT MIN(AccDate) SrcDate, SUM(LRecSumCC) AS Salary     FROM p_EmpIn m JOIN p_EmpInLRec d ON m.ChID = d.ChID JOIN r_PayTypes r ON d.PayTypeID = r.PayTypeID     WHERE r.UseInDisPay <> 0 AND WorkAppDate = @GivDate AND OurID = @OurID AND EmpID = @EmpID AND AccDate BETWEEN @BDate AND @EDate AND NOT EXISTS (SELECT TOP 1 1 FROM @out WHERE MONTH(SrcDate) = MONTH(AccDate))     GROUP BY MONTH(AccDate)   END ELSE   BEGIN     /* данных об отработанном времени нет - расчет по окладу и норме */     INSERT INTO @out (SrcDate, NormDays, Salary, AvrSalary, AvrDays)     SELECT 0, DaysNorm, BSalary ,  ROUND(CASE DaysNorm WHEN 0 THEN 0 ELSE BSalary / DaysNorm END, 2) AS AvgSalary, DaysNorm     FROM (SELECT  BSalary, CAST((ISNULL(n1.DaysNorm/2, 0) + ISNULL(n2.DaysNorm/2, 0)) AS int) AS DaysNorm           FROM r_EmpMPst m LEFT JOIN r_Sheds d ON m.ShedID = d.ShedID             LEFT JOIN r_NormMH n1 ON d.WWeekTypeID = n1.WWeekTypeID AND n1.MonthID = MONTH(@BDate) AND n1.YearID = YEAR(@BDate)             LEFT JOIN r_NormMH n2 ON d.WWeekTypeID = n2.WWeekTypeID AND n2.MonthID = MONTH(@EDate) AND n2.YearID = YEAR(@EDate)           WHERE m.OurID = @OurID AND m.EmpID = @EmpID AND @Date BETWEEN m.BDate AND m.EDate ) t   END     /* данные об отработанном времени и нормах */     UPDATE t SET       SrcDate = dbo.zf_GetMonthLastDay(SrcDate),       WorkDays = ISNULL((SELECT SUM(TWorkDays) FROM p_CWTime m JOIN p_CWTimeD d ON m.ChID = d.ChID WHERE CWTimeType = 0 AND OurID = @OurID AND EmpID = @EmpID AND DocDate BETWEEN dbo.zf_GetMonthFirstDay(SrcDate) AND dbo.zf_GetMonthLastDay(SrcDate)), 0) ,       NormDays = ISNULL((SELECT n1.DaysNorm FROM r_EmpMPst m LEFT JOIN r_Sheds d ON m.ShedID = d.ShedID LEFT JOIN r_NormMH n1 ON d.WWeekTypeID = n1.WWeekTypeID AND n1.MonthID = MONTH(t.SrcDate) AND n1.YearID = YEAR(t.SrcDate) WHERE m.OurID = @OurID AND m.EmpID = @EmpID AND SrcDate BETWEEN m.BDate AND m.EDate), 0)     FROM @out t     WHERE SrcDate <> 0     IF NOT EXISTS (SELECT 1 FROM @out WHERE SrcDate = 0)       INSERT INTO @out (SrcDate, WorkDays, NormDays, Salary, AvrDays) SELECT 0, SUM(WorkDays), SUM(NormDays), SUM(Salary), AVG(NormDays) FROM @out     UPDATE @out SET AvrSalary = CASE WHEN WorkDays <> 0 THEN ROUND(Salary / WorkDays, 2) ELSE 0 END     /* среднедневная ЗП по рабочим дням */     UPDATE @out SET AvrSalary = CASE WHEN NormDays <> 0 THEN ROUND(Salary / NormDays, 2) ELSE 0 END WHERE AvrSalary = 0     /* там где среднедневная ЗП по рабочим дням не расчитана - пропробывать по норме */     UPDATE @out SET AvrMonthSalary = ROUND(AvrSalary * AvrDays, 2) WHERE SrcDate = 0 RETURNEND
GO