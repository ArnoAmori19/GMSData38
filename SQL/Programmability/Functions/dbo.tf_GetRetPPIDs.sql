SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
CREATE FUNCTION [dbo].[tf_GetRetPPIDs](@OurID int, @CompID int, @ProdID int, @SrcDocDate smalldatetime, @SrcDocID varchar(250), @UseCheques bit, @StockID int = NULL)/* Возвращает партию и максимальное количество возврата */RETURNS @out table(DocDate datetime, PPID int, Qty numeric(21,9))BEGIN  DECLARE @RetMode int  SELECT @RetMode = dbo.zf_Var('t_RetMode')  IF @RetMode = 1 /* Партия последней продажи */    BEGIN      INSERT INTO @out(DocDate, PPID, Qty)      SELECT m.DocDate, d.PPID, Sum(d.Qty) AS TQty FROM t_Inv m, t_InvD d      WHERE m.ChID=d.ChID AND m.OurID = @OurID AND m.CompID = @CompID AND d.ProdID = @ProdID      AND (@SrcDocDate IS NULL AND m.DocDate BETWEEN dbo.zf_Var('t_RetBDate') AND dbo.zf_Var('t_RetEDate') OR @SrcDocDate IS NOT NULL AND m.DocDate = @SrcDocDate)      AND (@SrcDocID IS NULL OR CAST(m.DocID AS varchar(250)) = @SrcDocID)      AND @UseCheques = 0 AND ((m.StockID = @StockID OR @StockID IS NULL) OR (@SrcDocDate IS NOT NULL AND @SrcDocID IS NOT NULL))      GROUP BY m.DocDate, d.PPID      UNION ALL      SELECT m.DocDate, d.PPID, Sum(d.Qty) AS TQty FROM t_Exp m, t_ExpD d      WHERE m.ChID=d.ChID AND m.OurID = @OurID AND m.CompID = @CompID AND d.ProdID = @ProdID      AND (@SrcDocDate IS NULL AND m.DocDate BETWEEN dbo.zf_Var('t_RetBDate') AND dbo.zf_Var('t_RetEDate') OR @SrcDocDate IS NOT NULL AND m.DocDate = @SrcDocDate)      AND (@SrcDocID IS NULL OR CAST(m.DocID AS varchar(250)) = @SrcDocID)      AND @UseCheques = 0 AND ((m.StockID = @StockID OR @StockID IS NULL) OR (@SrcDocDate IS NOT NULL AND @SrcDocID IS NOT NULL))      GROUP BY m.DocDate, d.PPID      UNION ALL      SELECT m.DocDate, d.PPID, Sum(d.Qty) AS TQty FROM t_Epp m, t_EppD d      WHERE m.ChID=d.ChID AND m.OurID = @OurID AND m.CompID = @CompID AND d.ProdID = @ProdID      AND (@SrcDocDate IS NULL AND m.DocDate BETWEEN dbo.zf_Var('t_RetBDate') AND dbo.zf_Var('t_RetEDate') OR @SrcDocDate IS NOT NULL AND m.DocDate = @SrcDocDate)      AND (@SrcDocID IS NULL OR CAST(m.DocID AS varchar(250)) = @SrcDocID)      AND @UseCheques = 0 AND ((m.StockID = @StockID OR @StockID IS NULL) OR (@SrcDocDate IS NOT NULL AND @SrcDocID IS NOT NULL))      GROUP BY m.DocDate, d.PPID      UNION ALL      SELECT m.DocDate, d.PPID, Sum(d.Qty) AS TQty FROM t_Sale m, t_SaleD d      WHERE m.ChID=d.ChID AND m.OurID = @OurID AND m.CompID = @CompID AND d.ProdID = @ProdID      AND (@SrcDocDate IS NULL AND m.DocDate BETWEEN dbo.zf_Var('t_RetBDate') AND dbo.zf_Var('t_RetEDate') OR @SrcDocDate IS NOT NULL AND m.DocDate = @SrcDocDate)      AND (@SrcDocID IS NULL OR CAST(m.DocID AS varchar(250)) = @SrcDocID)      AND @UseCheques = 1 AND ((m.StockID = @StockID OR @StockID IS NULL) OR (@SrcDocDate IS NOT NULL AND @SrcDocID IS NOT NULL))      GROUP BY m.DocDate, d.PPID      ORDER BY DocDate DESC, PPID DESC    END  ELSE IF @RetMode = 2    /* Партия последнего прихода */    BEGIN      INSERT INTO @out(DocDate, PPID, Qty)      SELECT m.DocDate, d.PPID, 0 AS TQty FROM t_Rec m, t_RecD d WHERE m.ChID=d.ChID AND m.OurID = @OurID AND d.ProdID = @ProdID      UNION ALL      SELECT m.DocDate, d.PPID, 0 AS TQty FROM t_Cst m, t_CstD d WHERE m.ChID=d.ChID AND m.OurID = @OurID AND d.ProdID = @ProdID      ORDER BY DocDate DESC, PPID DESC    END  ELSE IF @RetMode = 3    /* Партия с минимальной ценой прихода */    BEGIN      INSERT INTO @out(DocDate, PPID, Qty)      SELECT ProdDate, PPID, 0 AS TQty FROM t_PInP WHERE ProdID = @ProdID AND PriceMC_In <> 0 AND ProdDate BETWEEN dbo.zf_Var('t_RetBDate') AND dbo.zf_Var('t_RetEDate')      ORDER BY PriceMC_In ASC, PPID ASC    END  ELSE IF @RetMode = 4    /* Партия с максимальной ценой прихода */    BEGIN      INSERT INTO @out(DocDate, PPID, Qty)      SELECT ProdDate, PPID, 0 AS TQty FROM t_PInP WHERE ProdID = @ProdID AND PriceMC_In <> 0 AND ProdDate BETWEEN dbo.zf_Var('t_RetBDate') AND dbo.zf_Var('t_RetEDate')      ORDER BY PriceMC_In DESC, PPID DESC    END  ELSE    BEGIN      INSERT INTO @out(DocDate, PPID, Qty)      VALUES('1900-01-01', 0, 0)    END  RETURNEND
GO